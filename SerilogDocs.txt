Serilog.AspNetCore
using Serilog;
using Serilog.Events;
using Serilog.Sinks.MSSqlServer;
Serilog.Settings.Configuration

=================
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Data;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Serilog;
using Serilog.Events;
using Serilog.Sinks.MSSqlServer;

namespace SerilogDemo
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            services.Configure<CookiePolicyOptions>(options =>
            {
                // This lambda determines whether user consent for non-essential cookies is needed for a given request.
                options.CheckConsentNeeded = context => true;
                options.MinimumSameSitePolicy = SameSiteMode.None;
            });


            services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_1);


            //var configuration = new ConfigurationBuilder().AddJsonFile("appsettings.json").Build();

            var connectionString = Configuration.GetConnectionString("NLogString");
            var tableName = "Logs";
            var columnOption = new ColumnOptions();
            columnOption.Store.Remove(StandardColumn.MessageTemplate);
            //Remove the column  
            // columnOption.Store.Remove(StandardColumn.Properties);

            columnOption.AdditionalDataColumns = new Collection<DataColumn>
            {
                new DataColumn {DataType = typeof (Guid), ColumnName = "CorrelatonId"},
                new DataColumn {DataType = typeof (string), ColumnName = "MessageData"},
                new DataColumn {DataType = typeof (string), ColumnName = "Result"},
            };

            Log.Logger = new LoggerConfiguration()
                            .MinimumLevel.Information()
                            .WriteTo.MSSqlServer(connectionString, tableName, columnOptions: columnOption)
                            .CreateLogger();

            var fileLogger = new LoggerConfiguration()
               .ReadFrom.Configuration(Configuration)
               .CreateLogger();
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IHostingEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            else
            {
                app.UseExceptionHandler("/Home/Error");
            }

            app.UseStaticFiles();
            app.UseCookiePolicy();

            app.UseMvc(routes =>
            {
                routes.MapRoute(
                    name: "default",
                    template: "{controller=Home}/{action=Index}/{id?}");
            });
        }
    }
}
===============
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using Serilog;

namespace SerilogDemo
{
    public class Program
    {
        public static void Main(string[] args)
        {



            CreateWebHostBuilder(args).Build().Run();
        }

        public static IWebHostBuilder CreateWebHostBuilder(string[] args) =>
            WebHost.CreateDefaultBuilder(args)
                .UseStartup<Startup>()
            .UseSerilog();
            
            
    }
}
=============
{
  "ConnectionStrings": {
    "DefaultConnection": "Server=(localdb)\\mssqllocaldb;Database=aspnet-NLogDemo-76A4868B-ADE6-4001-8C4C-E069522B89E0;Trusted_Connection=True;MultipleActiveResultSets=true",
    "NLogString": "Data Source=WASEEM-PC\\SQLEXPRESS;Initial Catalog=SerilogDemo;Integrated Security=True"
  },
  "Logging": {
    "LogLevel": {
      "Default": "Warning"
    }
  },
  "AllowedHosts": "*",
  "Serilog": {
    "Using": [ "Serilog.Sinks.File" ],
    "MinimumLevel": "Information",
    "WriteTo": [
      {
        "Name": "File",
        "Args": {
          "path": "Logs\\Example.txt", // log file path
          "rollingInterval": "Day", // Rolling Interval
          "outputTemplate": "{Timestamp:dd-MMM-yyyy HH:mm:ss.fff zzz} [{Level:u3}] {Message:lj}{NewLine}{Exception}"
        }
      }
    ]
  }
}
==================
GO
/****** Object:  Table [dbo].[Logs]    Script Date: 01/11/2018 9:41:50 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Logs](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[CorrelatonId] [uniqueidentifier] NULL,
	[MessageData] [nvarchar](max) NULL,
	[Result] [nvarchar](max) NULL,
	[Message] [nvarchar](max) NULL,
	[MessageTemplate] [nvarchar](max) NULL,
	[Level] [nvarchar](128) NULL,
	[TimeStamp] [datetimeoffset](7) NOT NULL,
	[Exception] [nvarchar](max) NULL,
	[Properties] [xml] NULL,
	[LogEvent] [nvarchar](max) NULL,
 CONSTRAINT [PK_Logs] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
================
//  Log.Information("Getting the motors running...");
            Log.ForContext("CorrelatonId", Guid.NewGuid()).ForContext("MessageData", "Message").ForContext("Result", "Ok").Information("My Message Logged");
            // Log.Logger.ForContext("CorrelatonId", "Test Data").Information("Index method called!!!");
            int x = 1;
            try
            {
                Log.Information("Calling Divide");
                x = x / 0;
                
            }
            catch (Exception ex)
            {
                Log.Information(ex, "This is Exception");
            }
			
			
			==============
			
public void LogMessage(Guid corr, string mess)
        {
            Log.ForContext("CorrelatonId", corr)
                .ForContext("MessageData", mess)
                .ForContext("Result", "Ok")
                .Information("My Message Logged");
            
        }